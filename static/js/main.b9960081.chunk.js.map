{"version":3,"sources":["configs/api.ts","api/http-client.ts","api/utils.ts","utils/leftPad.ts","utils/type-guards.ts","api/constants.ts","api/getters/pokemon.ts","api/getters/pokemon-ability.ts","api/getters/pokemon-evolution-chain.ts","api/getters/pokemon-move.ts","api/getters/pokemon-species.ts","api/getters/pokemons-list.ts","api/index.ts","components/header/index.tsx","components/pokemons-list/hooks/useInfinitePokemonsListQuery/index.ts","services/usePokemonQuery.ts","globals.ts","utils/components.ts","components/pokemons-list/components/pokemon-card/pokemon-img/index.tsx","components/pokemons-list/components/pokemon-card/pokemon-card-content/index.tsx","components/pokemons-list/components/pokemon-card/pokemon-card-skeleton/index.tsx","components/pokemons-list/components/pokemon-card/index.tsx","components/pokemons-list/index.tsx","components/Portal.tsx","services/usePokemonSpeciesQuery.ts","components/pokemon-details/components/pokemon-details-header/pokemon-details-img/index.tsx","components/pokemon-details/components/pokemon-details-header/pokemon-details-header-skeleton/index.tsx","components/pokemon-details/components/pokemon-details-header/index.tsx","components/pokemon-details/components/pokemon-details-overlay/index.tsx","components/pokemon-details/components/pokemon-details-navigation/pokemon-details-tabs/pokemon-details-tab/index.tsx","components/pokemon-details/components/pokemon-details-navigation/pokemon-details-tabs/index.tsx","components/pokemon-details/components/pokemon-details-navigation/routes/pokemon-stats/index.tsx","components/description-list/description-list-item/index.tsx","components/description-list/index.tsx","components/badge.tsx","components/pokemon-details/components/pokemon-details-navigation/routes/pokemon-biography/pokemon-evolutions/pokemon-evolution/pokemon-upcoming-evolution/index.tsx","components/pokemon-details/components/pokemon-details-navigation/routes/pokemon-biography/pokemon-evolutions/pokemon-evolution/pokemon-current-evolution/index.tsx","components/pokemon-details/components/pokemon-details-navigation/routes/pokemon-biography/pokemon-evolutions/pokemon-evolution/pokemon-previous-evolution/index.tsx","components/pokemon-details/components/pokemon-details-navigation/routes/pokemon-biography/pokemon-evolutions/pokemon-evolution/index.tsx","components/pokemon-details/hooks/usePokemonEvolutions.ts","components/pokemon-details/components/pokemon-details-navigation/routes/pokemon-biography/pokemon-evolutions/index.tsx","components/pokemon-details/components/pokemon-details-navigation/routes/pokemon-biography/index.tsx","components/pokemon-details/hooks/usePokemonMoveQuery.ts","components/pokemon-details/components/pokemon-details-navigation/routes/pokemon-moves/pokemon-move/pokemon-move-content/index.tsx","components/pokemon-details/components/pokemon-details-navigation/routes/pokemon-moves/pokemon-move/pokemon-move-skeleton/index.tsx","components/pokemon-details/components/pokemon-details-navigation/routes/pokemon-moves/pokemon-move/index.tsx","components/pokemon-details/components/pokemon-details-navigation/routes/pokemon-moves/index.tsx","components/pokemon-details/hooks/usePokemonAbilityQuery.ts","components/pokemon-details/components/pokemon-details-navigation/routes/pokemon-abilities/pokemon-ability/pokemon-ability-content/index.tsx","components/pokemon-details/components/pokemon-details-navigation/routes/pokemon-abilities/pokemon-ability/pokemon-ability-skeleton/index.tsx","components/pokemon-details/components/pokemon-details-navigation/routes/pokemon-abilities/pokemon-ability/index.tsx","components/pokemon-details/components/pokemon-details-navigation/routes/pokemon-abilities/index.tsx","components/pokemon-details/components/pokemon-details-navigation/index.tsx","components/pokemon-details/index.tsx","routes/details.tsx","app/navigation.tsx","app/index.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":[],"mappings":"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","file":"static/js/main.b9960081.chunk.js","sourcesContent":["export const BASE_URL = \"https://pokeapi.co/api/v2/\";\n","import axios from \"axios\";\nimport { BASE_URL } from \"configs/api\";\n\nexport const httpClient = axios.create({\n  baseURL: BASE_URL,\n});\n","import { compact } from \"lodash\";\nimport { leftPad } from \"utils/leftPad\";\nimport { isNumeric } from \"utils/type-guards\";\nimport { HQ_SPRITES_URL } from \"./constants\";\n\nexport const extractSearchParams = <T extends object>(\n  url: string,\n  match: (obj: any) => boolean\n): T => {\n  const _url = new URL(url);\n  function isType(type: object): type is T {\n    return match(type);\n  }\n\n  const obj = Object.fromEntries(_url.searchParams);\n  if (isType(obj)) {\n    return obj;\n  }\n  throw new Error(`the passed url ${url} doesn't match the selected type`);\n};\nexport const transformSpriteToBaseImage = (\n  pokemonId: number,\n  baseUrl: string\n): string => {\n  return baseUrl + leftPad(pokemonId, 3) + \".png\";\n};\n\nexport function extractIdFromUrl(url: string): string {\n  const _url = new URL(url);\n  const id = compact(_url.pathname.split(\"/\")).pop();\n  if (isNumeric(id)) {\n    return id;\n  }\n  throw new Error(\n    `the passed url ${url} doesn't has a valid numeric ID at  its end`\n  );\n}\n\nexport function getPokemonImageUrl(id: string | number) {\n  return transformSpriteToBaseImage(Number(id), HQ_SPRITES_URL);\n}\n","import { isNumeric } from \"./type-guards\";\n\nexport const leftPad = (\n  number: number | string,\n  targetLength: number\n): string => {\n  if (!isNumeric(number)) {\n    throw new Error(\n      `the argument number ${number} must be a valid positive number`\n    );\n  }\n  let output = Math.abs(number).toString();\n  while (output.length < Math.abs(targetLength)) {\n    output = \"0\" + output;\n  }\n  return output;\n};\n","export function isNumeric(val: any): val is number {\n  return /^\\d+$/.test(val);\n}\n","export const HQ_SPRITES_URL =\n  \"https://raw.githubusercontent.com/HybridShivam/Pokemon/master/assets/images/\";\nexport const BASE_SPRITES_URL =\n  \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon\";\n","import deepmerge from \"deepmerge\";\nimport { getPokemonImageUrl } from \"../utils\";\nimport { BASE_SPRITES_URL } from \"../constants\";\nimport { httpClient } from \"../http-client\";\nimport { Pokemon } from \"../pokeapi-types\";\n\nexport async function getPokemon(id: string): Promise<Pokemon> {\n  const { data } = await httpClient.get<Pokemon>(`pokemon/${id}`);\n  const hq_front_default = getPokemonImageUrl(data.id);\n  const front_default = `${BASE_SPRITES_URL}${id}`;\n  const transformedPokemon: Partial<Pokemon> = {\n    sprites: { ...data.sprites, hq_front_default, front_default },\n  };\n  return deepmerge<Pokemon>(data, transformedPokemon);\n}\n","import { Ability } from \"../pokeapi-types\";\nimport { httpClient } from \"../http-client\";\n\nexport async function getPokemonAbility(name: string) {\n  const { data } = await httpClient.get<Ability>(`ability/${name}`);\n  return data;\n}\n","import { httpClient } from \"../http-client\";\nimport { EvolutionChain } from \"api/pokeapi-types\";\n\nexport async function getPokemonEvolutionChain(id: string) {\n  const { data } = await httpClient.get<EvolutionChain>(\n    `evolution-chain/${id}`\n  );\n  return data;\n}\n","import { httpClient } from \"../http-client\";\nimport { PokemonMoveDetails } from \"api/pokeapi-types\";\n\nexport async function getPokemonMove(name: string) {\n  const { data } = await httpClient.get<PokemonMoveDetails>(`move/${name}`);\n  return data;\n}\n","import { httpClient } from \"../http-client\";\nimport { PokemonSpecies } from \"../pokeapi-types\";\n\nexport async function getPokemonSpecies(id: string) {\n  const { data } = await httpClient.get<PokemonSpecies>(\n    `pokemon-species/${id}`\n  );\n  return data;\n}\n","import { httpClient } from \"../http-client\";\nimport { PokemonsList } from \"../pokeapi-types\";\nimport { extractIdFromUrl, extractSearchParams } from \"../utils\";\n\nexport type PokemonsListParams = { limit: number; offset?: number };\n\nexport interface TransformedPokemonsList {\n  previous: PokemonsListParams | null;\n  next: PokemonsListParams | null;\n  results: Record<\"name\" | \"id\", string>[];\n}\n\nexport async function getPokemonsList(interval: {\n  limit: number;\n  offset?: number;\n}): Promise<TransformedPokemonsList> {\n  const { limit, offset } = interval;\n  const {\n    data: { previous, next, results },\n  } = await httpClient.get<PokemonsList>(\n    `pokemon?limit=${limit}&offset=${offset}`\n  );\n\n  const matchPokemonParams = (params: object) => params.hasOwnProperty(\"limit\");\n\n  const prevParams = previous\n    ? extractSearchParams<PokemonsListParams>(previous, matchPokemonParams)\n    : null;\n  const nextParams = next\n    ? extractSearchParams<PokemonsListParams>(next, matchPokemonParams)\n    : null;\n\n  return {\n    previous: prevParams,\n    next: nextParams,\n    results: results.map(({ name, url }) => ({\n      name,\n      id: extractIdFromUrl(url),\n    })),\n  };\n}\n","export * from \"./http-client\";\nexport * from \"./getters\";\nexport * from \"./pokeapi-types\";\n","import React from \"react\";\nimport \"./styles.scss\";\n\nexport const Header: React.VFC = () => (\n  <div className=\"header\">\n    <div className=\"header-container\">\n      <div className=\"header-developer-section\">\n        <p className=\"header-developer-section-subtitle\">Developed by</p>\n        <h3 className=\"header-developer-section-title\">Wasim Almadfaa</h3>\n      </div>\n      <div className=\"header-actions-section\">\n        <a href=\"https://github.com/wmadfaa\" className=\"header-action\">\n          <span>Github/wmadfaa</span>\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import { useInfiniteQuery, useIsFetching, useQueryClient } from \"react-query\";\nimport { useAsyncCallback } from \"react-async-hook\";\nimport { FetchInfiniteQueryOptions } from \"react-query/types/core/types\";\nimport {\n  getPokemonsList,\n  PokemonsListParams,\n  TransformedPokemonsList,\n} from \"api\";\n\nconst DEFAULT_POKEMONS_LIST_PARAMS: PokemonsListParams = {\n  limit: 20,\n  offset: 0,\n};\n\nconst fetchInfiniteQueryOptions: FetchInfiniteQueryOptions<\n  TransformedPokemonsList,\n  Error,\n  TransformedPokemonsList\n> = {\n  getPreviousPageParam: ({ previous }) => previous ?? false,\n  getNextPageParam: ({ next }) => next ?? false,\n};\n\nexport function useInfinitePokemonsListQuery(\n  interval = DEFAULT_POKEMONS_LIST_PARAMS\n) {\n  return useInfiniteQuery<\n    TransformedPokemonsList,\n    Error,\n    TransformedPokemonsList\n  >(\n    [\"pokemons-list\", interval],\n    ({ pageParam = interval }) => {\n      return getPokemonsList(pageParam);\n    },\n    {\n      getPreviousPageParam: ({ previous }) => previous ?? false,\n      getNextPageParam: ({ next }) => next ?? false,\n    }\n  );\n}\n\nexport function usePrefetchPokemonsList(\n  interval = DEFAULT_POKEMONS_LIST_PARAMS\n) {\n  const queryClient = useQueryClient();\n  const isFetching = useIsFetching([\"pokemons-list\", interval]);\n\n  return useAsyncCallback(async (params: PokemonsListParams = interval) => {\n    if (!isFetching) {\n      await queryClient.prefetchInfiniteQuery(\n        [\"pokemons-list\", interval],\n        ({ pageParam = params }) => {\n          return getPokemonsList(pageParam);\n        },\n        fetchInfiniteQueryOptions as any\n      );\n    }\n  });\n}\n","import { useIsFetching, useQuery, useQueryClient } from \"react-query\";\nimport { useAsyncCallback } from \"react-async-hook\";\nimport { Pokemon, getPokemon } from \"api\";\n\nexport function usePokemonQuery(id: string) {\n  return useQuery<Pokemon, Error, Pokemon>([\"pokemon\", id], async () =>\n    getPokemon(id)\n  );\n}\n\nexport async function usePrefetchPokemon(pokemonId: string) {\n  const queryClient = useQueryClient();\n  const isFetching = useIsFetching([\"pokemon\", pokemonId]);\n\n  return useAsyncCallback(async (id: string = pokemonId) => {\n    if (!isFetching) {\n      await queryClient.prefetchQuery([\"pokemon\", id], async () =>\n        getPokemon(id)\n      );\n    }\n  });\n}\n","export const ROUTES = <const>{\n  MAIN: \"/\",\n  DETAILS: \"/details/:id\",\n};\n\ninterface PokemonTypeColor {\n  light: string;\n  medium: string;\n}\n\nexport const POKEMON_TYPE_COLORS: Record<string, PokemonTypeColor> = {\n  normal: {\n    light: \"#cdcdb9\",\n    medium: \"#C4C4A4\",\n  },\n  fire: {\n    light: \"#F4934D\",\n    medium: \"#F08030\",\n  },\n  fighting: {\n    light: \"#BA5852\",\n    medium: \"#C03028\",\n  },\n  water: {\n    light: \"#85A5F0\",\n    medium: \"#6890F0\",\n  },\n  flying: {\n    light: \"#B8A5F2\",\n    medium: \"#A890F0\",\n  },\n  grass: {\n    light: \"#99D07D\",\n    medium: \"#78C850\",\n  },\n  poison: {\n    light: \"#A768A7\",\n    medium: \"#A040A0\",\n  },\n  electric: {\n    light: \"#F9DF78\",\n    medium: \"#F8D030\",\n  },\n  ground: {\n    light: \"#EDD081\",\n    medium: \"#E0C068\",\n  },\n  psychic: {\n    light: \"#F47DA1\",\n    medium: \"#F85888\",\n  },\n  rock: {\n    light: \"#C5B059\",\n    medium: \"#B8A038\",\n  },\n  ice: {\n    light: \"#B3E1E1\",\n    medium: \"#98D8D8\",\n  },\n  bug: {\n    light: \"#B5C534\",\n    medium: \"#A8B820\",\n  },\n  dragon: {\n    light: \"#8656FA\",\n    medium: \"#7038F8\",\n  },\n  ghost: {\n    light: \"#7D6B9B\",\n    medium: \"#705898\",\n  },\n  dark: {\n    light: \"#756459\",\n    medium: \"#705848\",\n  },\n  steel: {\n    light: \"#C1C1D1\",\n    medium: \"#B8B8D0\",\n  },\n  fairy: {\n    light: \"#EFA7B7\",\n    medium: \"#EE99AC\",\n  },\n};\n\nexport const POKEMON_TAILWIND_COLORS: Record<string, string> = {\n  normal: \"amber\",\n  fire: \"orange\",\n  fighting: \"red\",\n  water: \"blue\",\n  flying: \"violet\",\n  grass: \"green\",\n  poison: \"purple\",\n  electric: \"yellow\",\n  ground: \"amber\",\n  psychic: \"pink\",\n  rock: \"trueGray\",\n  ice: \"lightBlue\",\n  bug: \"emerald\",\n  dragon: \"violet\",\n  ghost: \"purple\",\n  dark: \"warmGray\",\n  steel: \"fuchsia\",\n  fairy: \"rose\",\n};\n","import { Type } from \"api\";\nimport { compact, get, map } from \"lodash\";\nimport { POKEMON_TYPE_COLORS } from \"../globals\";\n\nexport function getPokemonColorsByTypes(PokemonTypes: Type[]) {\n  const matcher = <T extends any>(col: Record<string, T>): T[] =>\n    compact(map(PokemonTypes, ({ type }) => get(col, type.name)));\n\n  return matcher(POKEMON_TYPE_COLORS);\n}\n","import React, { useMemo } from \"react\";\nimport { motion } from \"framer-motion\";\nimport ProgressiveImage from \"react-progressive-image-loading\";\nimport { Type } from \"api\";\nimport { getPokemonColorsByTypes } from \"utils/components\";\n\nconst IMG_SIZE = 150;\nconst MASK_SIZE = 200;\n\nexport interface PokemonImgProps {\n  id: string;\n  preview: string;\n  src: string;\n  name: string;\n  types: Type[];\n}\n\nexport const PokemonImg: React.VFC<PokemonImgProps> = (props) => {\n  const [{ light: backgroundColor }] = useMemo(\n    () => getPokemonColorsByTypes(props.types),\n    [props.types]\n  );\n\n  return (\n    <motion.div className=\"pokemon-img\" layoutId={`pokemon-img-${props.id}`}>\n      <div\n        className=\"pokemon-img-mask\"\n        style={{\n          width: MASK_SIZE,\n          height: MASK_SIZE,\n          backgroundColor,\n        }}\n      />\n      <div\n        className=\"pokemon-img-wrapper\"\n        style={{\n          width: IMG_SIZE,\n          height: IMG_SIZE,\n          bottom: MASK_SIZE / 8,\n        }}\n      >\n        <ProgressiveImage\n          preview={props.preview}\n          src={props.src}\n          transitionTime={500}\n          render={(src, style) => (\n            <img src={src} style={style} alt={props.name} />\n          )}\n        />\n      </div>\n    </motion.div>\n  );\n};\n","import React, { useEffect, useMemo } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { leftPad } from \"utils/leftPad\";\nimport { usePokemonQuery } from \"services/usePokemonQuery\";\nimport { PokemonImg } from \"../pokemon-img\";\n\nexport interface PokemonCardContentProps {\n  id: string;\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const PokemonCardContent: React.VFC<PokemonCardContentProps> = (\n  props\n) => {\n  const { data, isLoading } = usePokemonQuery(props.id);\n  const subtitle = useMemo(() => leftPad(props.id, 3), [props.id]);\n\n  useEffect(() => {\n    if (data && !isLoading) props.setIsLoading(false);\n    else props.setIsLoading(true);\n  }, [isLoading, data, props]);\n\n  if (!data) return null;\n\n  return (\n    <motion.div\n      className=\"pokemon-card-content\"\n      layoutId={`pokemon-card-content-${props.id}`}\n    >\n      <motion.div\n        className=\"pokemon-card-header\"\n        layoutId={`pokemon-card-header-${props.id}`}\n      >\n        <motion.p\n          className=\"pokemon-card-subtitle\"\n          layoutId={`pokemon-card-subtitle-${props.id}`}\n        >\n          #{subtitle}\n        </motion.p>\n        <motion.h1\n          className=\"pokemon-card-title\"\n          layoutId={`pokemon-card-title-${props.id}`}\n        >\n          {data.name}\n        </motion.h1>\n      </motion.div>\n      <motion.div\n        className=\"pokemon-card-body\"\n        layoutId={`pokemon-card-body-${props.id}`}\n      >\n        <PokemonImg\n          id={props.id}\n          preview={data.sprites.front_default}\n          src={data.sprites.hq_front_default}\n          name={data.name}\n          types={data.types}\n        />\n      </motion.div>\n    </motion.div>\n  );\n};\n","import React from \"react\";\n\nexport interface PokemonCardSkeletonProps {}\n\nexport const PokemonCardSkeleton: React.VFC<PokemonCardSkeletonProps> = () => {\n  return (\n    <div className=\"pokemon-card-content-skeleton\">\n      <div className=\"pokemon-card-header-skeleton\">\n        <div className=\"pokemon-card-subtitle-skeleton\" />\n        <div className=\"pokemon-card-title-skeleton\" />\n      </div>\n      <div className=\"pokemon-card-body-skeleton\">\n        <div className=\"pokemon-img-skeleton\" />\n      </div>\n    </div>\n  );\n};\n","import React, { forwardRef, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { PokemonCardContent } from \"./pokemon-card-content\";\nimport { PokemonCardSkeleton } from \"./pokemon-card-skeleton\";\n\nexport interface PokemonCardProps {\n  id: string;\n  inView: boolean;\n}\n\nexport const PokemonCard = forwardRef<HTMLDivElement, PokemonCardProps>(\n  (props, ref) => {\n    const [isLoading, setIsLoading] = useState(true);\n\n    return (\n      <div className=\"pokemon-card\" ref={ref}>\n        {props.inView && (\n          <Link to={props.id}>\n            <PokemonCardContent id={props.id} setIsLoading={setIsLoading} />\n          </Link>\n        )}\n        {isLoading && <PokemonCardSkeleton />}\n      </div>\n    );\n  }\n);\nPokemonCard.displayName = \"PokemonCard\";\n","import React, { useMemo } from \"react\";\nimport { last, flatMap } from \"lodash\";\nimport { useAsync } from \"react-async-hook\";\nimport { InView, useInView } from \"react-intersection-observer\";\nimport { useInfinitePokemonsListQuery } from \"./hooks/useInfinitePokemonsListQuery\";\nimport { PokemonCard } from \"./components/pokemon-card\";\n\nimport \"./styles.scss\";\n\nexport const PokemonsList: React.VFC = () => {\n  const { data, fetchNextPage, hasNextPage } = useInfinitePokemonsListQuery();\n  const nextAnchorObserver = useInView({\n    skip: !hasNextPage,\n  });\n\n  const handleFetchNextPage = useAsync(async () => {\n    if (data && nextAnchorObserver.inView && !handleFetchNextPage.loading) {\n      const lastPage = last(data.pages);\n      await fetchNextPage({ pageParam: lastPage?.next });\n    }\n  }, [nextAnchorObserver.inView]);\n\n  const allPokemons = useMemo(() => {\n    if (data?.pages) {\n      return flatMap(data.pages, (page) => page.results);\n    }\n    return [];\n  }, [data?.pages]);\n\n  return (\n    <>\n      <div className=\"pokemons-list\">\n        {allPokemons.map(({ id }) => (\n          <InView key={id} triggerOnce>\n            {({ ref, inView }) => (\n              <PokemonCard id={id} ref={ref} inView={inView} />\n            )}\n          </InView>\n        ))}\n      </div>\n      <div ref={nextAnchorObserver.ref} />\n    </>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nconst Portal: React.FC = ({ children }) => {\n  const mount = document.getElementById(\"portal-root\") as HTMLElement;\n  const el = document.createElement(\"div\");\n\n  useEffect(() => {\n    mount.appendChild(el);\n    return () => {\n      mount.removeChild(el);\n    };\n  }, [el, mount]);\n\n  return createPortal(children, el);\n};\n\nexport default Portal;\n","import { useIsFetching, useQuery, useQueryClient } from \"react-query\";\nimport { useAsyncCallback } from \"react-async-hook\";\nimport { PokemonSpecies, getPokemonSpecies, getPokemon } from \"api\";\n\nexport function usePokemonSpeciesQuery(id: string) {\n  return useQuery<PokemonSpecies, Error, PokemonSpecies>(\n    [\"pokemon-species\", id],\n    async () => getPokemonSpecies(id)\n  );\n}\n\nexport async function usePrefetchPokemonSpecies(speciesId: string) {\n  const queryClient = useQueryClient();\n  const isFetching = useIsFetching([\"pokemon-species\", speciesId]);\n\n  return useAsyncCallback(async (id: string = speciesId) => {\n    if (!isFetching) {\n      await queryClient.prefetchQuery([\"pokemon-species\", id], async () =>\n        getPokemon(id)\n      );\n    }\n  });\n}\n","import React, { useMemo } from \"react\";\nimport ProgressiveImage from \"react-progressive-image-loading\";\nimport { useSpring, animated } from \"react-spring\";\nimport { Type } from \"api\";\nimport { getPokemonColorsByTypes } from \"utils/components\";\n\nconst calc = (x: number, y: number) => [\n  x - window.innerWidth / 2,\n  y - window.innerHeight / 2,\n];\nconst mask_trans = (x: number, y: number) =>\n  `translate3d(${x / 10}px,${y / 10}px,0)`;\nconst img_trans = (x: number, y: number) =>\n  `translate3d(${x / 3.5}px,${y / 3.5}px,0)`;\n\nexport interface PokemonDetailsImgProps {\n  id: string;\n  preview: string;\n  src: string;\n  name: string;\n  types: Type[];\n}\n\nexport const PokemonDetailsImg: React.VFC<PokemonDetailsImgProps> = (props) => {\n  const [{ light: backgroundColor }] = useMemo(\n    () => getPokemonColorsByTypes(props.types),\n    [props.types]\n  );\n\n  const [springProps, set] = useSpring(() => ({\n    xy: [0, 0],\n    config: { mass: 10, tension: 260, friction: 140 },\n  }));\n\n  return (\n    <div\n      className=\"pokemon-details-img\"\n      onMouseMove={({ clientX: x, clientY: y }) => set({ xy: calc(x, y) })}\n    >\n      <animated.div\n        className=\"pokemon-details-img-mask\"\n        style={{\n          backgroundColor,\n          // @ts-ignore\n          transform: springProps.xy.interpolate(mask_trans),\n        }}\n      />\n      <ProgressiveImage\n        preview={props.preview}\n        src={props.src}\n        transitionTime={500}\n        render={(src, style) => (\n          <animated.img\n            src={src}\n            alt={props.name}\n            className=\"pokemon-details-img-wrapper\"\n            style={{\n              ...style,\n              // @ts-ignore\n              transform: springProps.xy.interpolate(img_trans),\n            }}\n          />\n        )}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport interface PokemonDetailsHeaderSkeletonProps {}\n\nexport const PokemonDetailsHeaderSkeleton: React.VFC<PokemonDetailsHeaderSkeletonProps> = () => {\n  return (\n    <div className=\"pokemon-details-header-skeleton\">\n      <div className=\"pokemon-details-header-content-skeleton\">\n        <div className=\"pokemon-details-header-title-container-skeleton\">\n          <div className=\"pokemon-details-header-subtitle-skeleton\" />\n          <div className=\"pokemon-details-header-title-skeleton\" />\n        </div>\n        <div className=\"pokemon-details-header-body-skeleton\">\n          <div className=\"pokemon-details-header-img-skeleton\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { find } from \"lodash\";\nimport { motion } from \"framer-motion\";\nimport { leftPad } from \"utils/leftPad\";\nimport { usePokemonQuery } from \"services/usePokemonQuery\";\nimport { usePokemonSpeciesQuery } from \"services/usePokemonSpeciesQuery\";\nimport { PokemonDetailsImg } from \"./pokemon-details-img\";\nimport { PokemonDetailsHeaderSkeleton } from \"./pokemon-details-header-skeleton\";\nimport { getPokemonColorsByTypes } from \"utils/components\";\n\nexport interface PokemonDetailsHeaderProps {\n  id: string;\n}\n\nexport const PokemonDetailsHeader: React.VFC<PokemonDetailsHeaderProps> = (\n  props\n) => {\n  const { data: pokemon } = usePokemonQuery(props.id);\n  const { data: species } = usePokemonSpeciesQuery(props.id);\n  const backgroundColor = useMemo(\n    () => (pokemon ? getPokemonColorsByTypes(pokemon.types)[0].medium : null),\n    [pokemon]\n  );\n\n  const nativeName = useMemo(() => {\n    if (species && species.names) {\n      return find(\n        species.names,\n        (name) => name.language.name.toLocaleLowerCase() === \"ja\"\n      );\n    }\n  }, [species]);\n\n  if (!pokemon || !nativeName || !backgroundColor)\n    return <PokemonDetailsHeaderSkeleton />;\n\n  return (\n    <div className=\"pokemon-details-header\">\n      <div\n        className=\"pokemon-details-header-content\"\n        style={{ backgroundColor }}\n      >\n        <motion.div\n          className=\"pokemon-details-header-title-container\"\n          layoutId={`pokemon-card-header-${props.id}`}\n        >\n          <motion.p\n            className=\"pokemon-details-header-subtitle\"\n            layoutId={`pokemon-card-subtitle-${props.id}`}\n          >\n            #{leftPad(props.id, 3)}\n          </motion.p>\n          <motion.h1\n            className=\"pokemon-details-header-title\"\n            layoutId={`pokemon-card-title-${props.id}`}\n          >\n            {pokemon.name}\n          </motion.h1>\n        </motion.div>\n        <motion.div\n          className=\"pokemon-details-header-body\"\n          layoutId={`pokemon-card-body-${props.id}`}\n        >\n          <motion.h1 className=\"pokemon-details-header-native-name\">\n            {nativeName.name}\n          </motion.h1>\n          <PokemonDetailsImg\n            id={props.id}\n            name={pokemon.name}\n            types={pokemon.types}\n            preview={pokemon.sprites.front_default}\n            src={pokemon.sprites.hq_front_default}\n          />\n        </motion.div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Link } from \"react-router-dom\";\n\nconst MotionLink = motion.custom(Link);\n\nexport const PokemonDetailsOverlay: React.VFC = () => {\n  return (\n    <MotionLink\n      to=\"/\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0, transition: { duration: 0.15 } }}\n      transition={{ duration: 0.2, delay: 0.15 }}\n      style={{ pointerEvents: \"auto\" }}\n      className=\"pokemon-details-overlay\"\n    />\n  );\n};\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nexport interface PokemonDetailsTabProps<T> {\n  onClick(id: T): void;\n  id: T;\n  label: string;\n  current: boolean;\n}\n\nexport function PokemonDetailsTab<T>(\n  props: PokemonDetailsTabProps<T>\n): JSX.Element {\n  return (\n    <div\n      onClick={() => props.onClick(props.id)}\n      className={classNames(\"pokemon-details-tab\", {\n        default: !props.current,\n        current: props.current,\n      })}\n      aria-current={props.current ? \"page\" : undefined}\n    >\n      {props.label}\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./styles.scss\";\nimport {\n  PokemonDetailsTab,\n  PokemonDetailsTabProps,\n} from \"./pokemon-details-tab\";\n\nexport interface PokemonDetailsTabsProps<T> {\n  onChange(id: T): void;\n  currentId: T;\n  pages: Omit<PokemonDetailsTabProps<T>, \"onClick\" | \"current\">[];\n}\n\nexport function PokemonDetailsTabs<T>({\n  onChange,\n  pages,\n  currentId,\n}: PokemonDetailsTabsProps<T>): JSX.Element {\n  return (\n    <div className=\"bg-gray-900 py-6 sticky top-0 z-10\">\n      <nav className=\"pokemon-details-tabs\" aria-label=\"Tabs\">\n        {pages.map((page, index) => (\n          <PokemonDetailsTab\n            current={currentId === page.id}\n            key={page.label}\n            onClick={onChange}\n            {...page}\n          />\n        ))}\n      </nav>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { usePokemonQuery } from \"services/usePokemonQuery\";\n\nexport interface PokemonStatsProps {\n  pokemonId: string;\n}\n\nexport const PokemonStats: React.VFC<PokemonStatsProps> = (props) => {\n  const { data: pokemon } = usePokemonQuery(props.pokemonId);\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n        <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\n          <div className=\"shadow overflow-hidden border-b border-gray-800 sm:rounded-lg\">\n            <table className=\"min-w-full divide-y divide-gray-800\">\n              <thead className=\"bg-gray-800\">\n                <tr>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\"\n                  >\n                    Name\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\"\n                  >\n                    Base Stat\n                  </th>\n                  <th\n                    scope=\"col\"\n                    className=\"px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\"\n                  >\n                    Effort\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-gray-50 divide-y divide-gray-800\">\n                {pokemon?.stats.map(({ stat, base_stat, effort }) => (\n                  <tr className=\"odd:bg-trueGray-900 even:bg-gray-800\">\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-50\">\n                      {stat.name}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-400\">\n                      {base_stat}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-400\">\n                      {effort}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport interface DescriptionListItemProps {\n  title: string;\n}\n\nexport const DescriptionListItem: React.FC<DescriptionListItemProps> = ({\n  children,\n  title,\n}) => {\n  return (\n    <div className=\"py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\">\n      <dt className=\"text-sm font-medium text-gray-400\">{title}</dt>\n      <dd className=\"mt-1 text-sm text-gray-100 sm:mt-0 sm:col-span-2\">\n        {children}\n      </dd>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport * from \"./description-list-item\";\nexport const DescriptionList: React.FC = ({ children }) => {\n  return (\n    <div className=\"bg-gray-800 sm:rounded-md\">\n      <div className=\"px-4 py-5 sm:p-0\">\n        <dl className=\"sm:divide-y sm:divide-gray-700\">{children}</dl>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { POKEMON_TAILWIND_COLORS } from \"../globals\";\n\nexport interface BadgeProps {\n  type: string;\n  label: string;\n}\n\nexport const Badge: React.VFC<BadgeProps> = ({ label, type }) => {\n  const color = POKEMON_TAILWIND_COLORS[type];\n  return (\n    <span\n      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${color}-100 text-${color}-800`}\n    >\n      {label}\n    </span>\n  );\n};\n","import React from \"react\";\n\nexport const PokemonUpcomingEvolution: React.VFC<{\n  id: number;\n  name: string;\n}> = ({ id, name }) => {\n  return (\n    <div className=\"group flex items-center\">\n      <span className=\"px-6 py-4 flex items-center text-sm font-medium\">\n        <span className=\"flex-shrink-0 w-10 h-10 flex items-center justify-center border-2 border-gray-700 rounded-full group-hover:border-gray-600\">\n          <span className=\"text-gray-500 group-hover:text-gray-100\">{id}</span>\n        </span>\n        <span className=\"ml-4 text-sm font-medium text-gray-500 group-hover:text-gray-100\">\n          {name}\n        </span>\n      </span>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const PokemonCurrentEvolution: React.VFC<{\n  id: number;\n  name: string;\n}> = ({ id, name }) => {\n  return (\n    <div className=\"px-6 py-4 flex items-center text-sm font-medium\">\n      <span\n        className=\"flex-shrink-0 w-10 h-10 flex items-center justify-center border-2 border-indigo-600 rounded-full\"\n        aria-current=\"step\"\n      >\n        <span className=\"text-indigo-400\">{id}</span>\n      </span>\n      <span className=\"ml-4 text-sm font-medium text-indigo-600\">{name}</span>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const PokemonPreviousEvolution: React.VFC<{\n  id: number;\n  name: string;\n}> = ({ name }) => {\n  return (\n    <div className=\"group flex items-center w-full\">\n      <span className=\"px-6 py-4 flex items-center text-sm font-medium\">\n        <span className=\"flex-shrink-0 w-10 h-10 flex items-center justify-center bg-indigo-600 rounded-full group-hover:bg-indigo-800\">\n          <svg\n            className=\"w-6 h-6 text-white\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 20 20\"\n            fill=\"currentColor\"\n            aria-hidden=\"true\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n              clipRule=\"evenodd\"\n            />\n          </svg>\n        </span>\n        <span className=\"ml-4 text-sm font-medium text-gray-100\">{name}</span>\n      </span>\n    </div>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { PokemonUpcomingEvolution } from \"./pokemon-upcoming-evolution\";\nimport { PokemonCurrentEvolution } from \"./pokemon-current-evolution\";\nimport { PokemonPreviousEvolution } from \"./pokemon-previous-evolution\";\n\nexport interface PokemonEvolutionProps {\n  id: number;\n  name: string;\n  type: \"completed\" | \"current\" | \"upcoming\";\n  isLastPokemonEvolution: boolean;\n}\n\nexport const PokemonEvolution: React.FC<PokemonEvolutionProps> = ({\n  type,\n  isLastPokemonEvolution,\n  ...stepProps\n}) => {\n  const content = useMemo(() => {\n    switch (type) {\n      case \"completed\":\n        return <PokemonPreviousEvolution {...stepProps} />;\n      case \"current\":\n        return <PokemonCurrentEvolution {...stepProps} />;\n      case \"upcoming\":\n        return <PokemonUpcomingEvolution {...stepProps} />;\n    }\n  }, [stepProps, type]);\n\n  return <li className=\"relative\">{content}</li>;\n};\n","import { useQuery } from \"react-query\";\nimport {\n  getPokemonEvolutionChain,\n  getPokemonSpecies,\n  getPokemon,\n  Chain,\n  Pokemon,\n} from \"api\";\nimport { extractIdFromUrl } from \"api/utils\";\n\nfunction extractPokemonNames(chain: Chain) {\n  const flatten = (data: Chain, prev: string[] = []): string[] => {\n    if (data.evolves_to.length) {\n      return flatten(data.evolves_to[0], [...prev, data.species.name]);\n    }\n    return [...prev, data.species.name];\n  };\n  return flatten(chain);\n}\n\nexport function usePokemonEvolutions(id: string) {\n  return useQuery<Pokemon[], Error, Pokemon[]>(\n    [\"pokemon-evolutions\", id],\n    async () => {\n      const pokemons = [];\n      const pokemon = await getPokemon(id);\n      const species = await getPokemonSpecies(pokemon.species.name);\n      const chainId = extractIdFromUrl(species.evolution_chain.url);\n      const { chain } = await getPokemonEvolutionChain(chainId);\n      const names = extractPokemonNames(chain);\n      for (const name of names) {\n        pokemons.push(await getPokemon(name));\n      }\n      return pokemons;\n    }\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { findIndex } from \"lodash\";\n\nimport { PokemonEvolution } from \"./pokemon-evolution\";\nimport { usePokemonEvolutions } from \"../../../../../hooks/usePokemonEvolutions\";\nimport { Pokemon } from \"api\";\n\nexport interface PokemonEvolutionsProps {\n  id: string;\n}\n\nexport const PokemonEvolutions: React.VFC<PokemonEvolutionsProps> = (props) => {\n  const { data: evolutions } = usePokemonEvolutions(props.id);\n\n  const getTypeByIndex = useCallback(\n    (index: number, pokemons: Pokemon[]) => {\n      const currentIndex = findIndex(pokemons, { id: Number(props.id) });\n      if (index < currentIndex) {\n        return \"completed\";\n      } else if (index === currentIndex) {\n        return \"current\";\n      }\n      return \"upcoming\";\n    },\n    [props.id]\n  );\n\n  if (!evolutions) return null;\n\n  return (\n    <nav aria-label=\"Progress\">\n      <ol className=\"bg-trueGray-800 border border-gray-300 rounded-md divide-y divide-gray-300\">\n        {evolutions.map(({ id, name }, index) => (\n          <PokemonEvolution\n            id={id}\n            name={name}\n            type={getTypeByIndex(index, evolutions)}\n            isLastPokemonEvolution={index === evolutions.length - 1}\n          />\n        ))}\n      </ol>\n    </nav>\n  );\n};\n","import React from \"react\";\nimport { usePokemonQuery } from \"services/usePokemonQuery\";\nimport {\n  DescriptionList,\n  DescriptionListItem,\n} from \"components/description-list\";\nimport { Badge } from \"components/badge\";\nimport { PokemonEvolutions } from \"./pokemon-evolutions\";\n\nexport interface PokemonBiographyProps {\n  pokemonId: string;\n}\n\nexport const PokemonBiography: React.VFC<PokemonBiographyProps> = (props) => {\n  const { data: pokemon } = usePokemonQuery(props.pokemonId);\n  return (\n    <DescriptionList>\n      <DescriptionListItem title=\"Base Experience\">\n        {pokemon?.base_experience}\n      </DescriptionListItem>\n      <DescriptionListItem title=\"Order\">{pokemon?.order}</DescriptionListItem>\n      <DescriptionListItem title=\"Height\">\n        {pokemon?.height}\n      </DescriptionListItem>\n      <DescriptionListItem title=\"Weight\">\n        {pokemon?.weight}\n      </DescriptionListItem>\n      <DescriptionListItem title=\"Types\">\n        <div className=\"flex space-y-0 flex-row space-x-2\">\n          {pokemon?.types.map(({ type }) => (\n            <Badge label={type.name} type={type.name} />\n          ))}\n        </div>\n      </DescriptionListItem>\n      <DescriptionListItem title=\"Evolutions\">\n        <PokemonEvolutions id={props.pokemonId} />\n      </DescriptionListItem>\n    </DescriptionList>\n  );\n};\n","import { useQuery } from \"react-query\";\nimport { PokemonMoveDetails, getPokemonMove } from \"api\";\n\nexport function usePokemonMoveQuery(name: string) {\n  return useQuery<PokemonMoveDetails, Error, PokemonMoveDetails>(\n    [\"pokemon-move\", name],\n    async () => getPokemonMove(name)\n  );\n}\n","import React, { useEffect, useMemo } from \"react\";\nimport { usePokemonMoveQuery } from \"components/pokemon-details/hooks/usePokemonMoveQuery\";\nimport { find } from \"lodash\";\n\nexport interface PokemonMoveContentProps {\n  name: string;\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const PokemonMoveContent: React.VFC<PokemonMoveContentProps> = (\n  props\n) => {\n  const { data, isLoading } = usePokemonMoveQuery(props.name);\n\n  useEffect(() => {\n    if (data && !isLoading) props.setIsLoading(false);\n    else props.setIsLoading(true);\n  }, [isLoading, data, props]);\n\n  const en_effect = useMemo(() => {\n    if (data && data.effect_entries.length) {\n      return find(data.effect_entries, { language: { name: \"en\" } });\n    }\n  }, [data]);\n\n  if (!data) return null;\n\n  return (\n    <li className=\"pokemon-move\">\n      <div className=\"pokemon-move-header\">\n        <div className=\"pokemon-move-header-title-container\">\n          <div className=\"pokemon-move-header-title-content\">\n            <p className=\"pokemon-move-name\">{data.name}</p>\n            {en_effect && (\n              <p className=\"pokemon-move-short-effect\">\n                {en_effect.short_effect}\n              </p>\n            )}\n          </div>\n        </div>\n        <div className=\"pokemon-move-generation-name\">\n          {data.generation.name}\n        </div>\n      </div>\n      {en_effect && (\n        <div className=\"pokemon-move-effect-wrapper\">\n          <p className=\"pokemon-move-effect\">{en_effect.effect}</p>\n        </div>\n      )}\n    </li>\n  );\n};\n","import React from \"react\";\n\nexport interface PokemonMoveSkeletonProps {}\n\nexport const PokemonMoveSkeleton: React.VFC<PokemonMoveSkeletonProps> = () => {\n  return (\n    <li className=\"pokemon-move-skeleton\">\n      <div className=\"pokemon-move-header-skeleton\">\n        <div className=\"pokemon-move-header-title-container-skeleton\">\n          <div className=\"pokemon-move-header-title-content-skeleton\">\n            <p className=\"pokemon-move-name-skeleton\" />\n          </div>\n        </div>\n        <div className=\"pokemon-move-generation-name-skeleton\" />\n      </div>\n      <div className=\"pokemon-move-effect-wrapper-skeleton\">\n        <p className=\"pokemon-move-effect-skeleton\" />\n        <p className=\"pokemon-move-effect-skeleton\" />\n      </div>\n    </li>\n  );\n};\n","import React, { forwardRef, useState } from \"react\";\nimport { PokemonMoveContent } from \"./pokemon-move-content\";\nimport { PokemonMoveSkeleton } from \"./pokemon-move-skeleton\";\n\nexport interface PokemonMoveProps {\n  name: string;\n  inView: boolean;\n}\n\nexport const PokemonMove = forwardRef<HTMLDivElement, PokemonMoveProps>(\n  (props, ref) => {\n    const [isLoading, setIsLoading] = useState(true);\n\n    return (\n      <div ref={ref}>\n        {props.inView && (\n          <PokemonMoveContent name={props.name} setIsLoading={setIsLoading} />\n        )}\n        {isLoading && <PokemonMoveSkeleton />}\n      </div>\n    );\n  }\n);\nPokemonMove.displayName = \"PokemonMove\";\n","import React from \"react\";\nimport { InView } from \"react-intersection-observer\";\nimport { usePokemonQuery } from \"services/usePokemonQuery\";\nimport { PokemonMove } from \"./pokemon-move\";\n\nimport \"./styles.scss\";\n\nexport interface PokemonMovesProps {\n  pokemonId: string;\n}\n\nexport const PokemonMoves: React.VFC<PokemonMovesProps> = (props) => {\n  const { data } = usePokemonQuery(props.pokemonId);\n\n  if (!data) return null;\n\n  return (\n    <ul className=\"pokemon-moves-list\">\n      {data.moves.map(({ move }) => (\n        <InView key={move.name} triggerOnce>\n          {({ ref, inView }) => (\n            <PokemonMove name={move.name} inView={inView} ref={ref} />\n          )}\n        </InView>\n      ))}\n    </ul>\n  );\n};\n","import { useQuery } from \"react-query\";\nimport { Ability, getPokemonAbility } from \"api\";\n\nexport function usePokemonAbilityQuery(name: string) {\n  return useQuery<Ability, Error, Ability>(\n    [\"pokemon-ability\", name],\n    async () => getPokemonAbility(name)\n  );\n}\n","import React, { useEffect, useMemo } from \"react\";\nimport { usePokemonAbilityQuery } from \"../../../../../../hooks/usePokemonAbilityQuery\";\nimport { find } from \"lodash\";\n\nexport interface PokemonAbilityContentProps {\n  name: string;\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const PokemonAbilityContent: React.VFC<PokemonAbilityContentProps> = (\n  props\n) => {\n  const { data, isLoading } = usePokemonAbilityQuery(props.name);\n\n  useEffect(() => {\n    if (data && !isLoading) props.setIsLoading(false);\n    else props.setIsLoading(true);\n  }, [isLoading, data, props]);\n\n  const en_effect = useMemo(() => {\n    if (data && data.effect_entries.length) {\n      return find(data.effect_entries, { language: { name: \"en\" } });\n    }\n  }, [data]);\n\n  if (!data) return null;\n\n  return (\n    <li className=\"pokemon-ability\">\n      <div className=\"pokemon-ability-header\">\n        <div className=\"pokemon-ability-header-title-container\">\n          <div className=\"pokemon-ability-header-title-content\">\n            <p className=\"pokemon-ability-name\">{data.name}</p>\n            {en_effect && (\n              <p className=\"pokemon-ability-short-effect\">\n                {en_effect.short_effect}\n              </p>\n            )}\n          </div>\n        </div>\n        <div className=\"pokemon-ability-generation-name\">\n          {data.generation.name}\n        </div>\n      </div>\n      {en_effect && (\n        <div className=\"pokemon-ability-effect-wrapper\">\n          <p className=\"pokemon-ability-effect\">{en_effect.effect}</p>\n        </div>\n      )}\n    </li>\n  );\n};\n","import React from \"react\";\n\nexport interface PokemonAbilitySkeletonProps {}\n\nexport const PokemonAbilitySkeleton: React.VFC<PokemonAbilitySkeletonProps> = () => {\n  return (\n    <li className=\"pokemon-ability-skeleton\">\n      <div className=\"pokemon-ability-header-skeleton\">\n        <div className=\"pokemon-ability-header-title-container-skeleton\">\n          <div className=\"pokemon-ability-header-title-content-skeleton\">\n            <p className=\"pokemon-ability-name-skeleton\" />\n          </div>\n        </div>\n        <div className=\"pokemon-ability-generation-name-skeleton\" />\n      </div>\n      <div className=\"pokemon-ability-effect-wrapper-skeleton\">\n        <p className=\"pokemon-ability-effect-skeleton\" />\n        <p className=\"pokemon-ability-effect-skeleton\" />\n      </div>\n    </li>\n  );\n};\n","import React, { forwardRef, useState } from \"react\";\nimport { PokemonAbilityContent } from \"./pokemon-ability-content\";\nimport { PokemonAbilitySkeleton } from \"./pokemon-ability-skeleton\";\n\nimport \"./styles.scss\";\n\nexport interface PokemonAbilityProps {\n  name: string;\n  inView: boolean;\n}\n\nexport const PokemonAbility = forwardRef<HTMLDivElement, PokemonAbilityProps>(\n  (props, ref) => {\n    const [isLoading, setIsLoading] = useState(true);\n\n    return (\n      <div ref={ref}>\n        {props.inView && (\n          <PokemonAbilityContent\n            name={props.name}\n            setIsLoading={setIsLoading}\n          />\n        )}\n        {isLoading && <PokemonAbilitySkeleton />}\n      </div>\n    );\n  }\n);\nPokemonAbility.displayName = \"PokemonAbility\";\n","import React from \"react\";\nimport { InView } from \"react-intersection-observer\";\nimport { usePokemonQuery } from \"services/usePokemonQuery\";\nimport { PokemonAbility } from \"./pokemon-ability\";\n\nimport \"./styles.scss\";\n\nexport interface PokemonAbilitiesProps {\n  pokemonId: string;\n}\n\nexport const PokemonAbilities: React.VFC<PokemonAbilitiesProps> = (props) => {\n  const { data } = usePokemonQuery(props.pokemonId);\n\n  if (!data) return null;\n  console.log(data);\n  return (\n    <ul className=\"pokemon-abilities-list\">\n      {data.abilities.map(({ ability }) => (\n        <InView key={ability.name} triggerOnce>\n          {({ ref, inView }) => (\n            <PokemonAbility name={ability.name} inView={inView} ref={ref} />\n          )}\n        </InView>\n      ))}\n    </ul>\n  );\n};\n","import React, { useMemo, useState } from \"react\";\nimport { PokemonDetailsTabs } from \"./pokemon-details-tabs\";\nimport { PokemonStats } from \"./routes/pokemon-stats\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { PokemonBiography } from \"./routes/pokemon-biography\";\nimport { PokemonMoves } from \"./routes/pokemon-moves\";\nimport { PokemonAbilities } from \"./routes/pokemon-abilities\";\n\nenum Pages {\n  POKEMON_BIOGRAPHY,\n  POKEMON_STATS,\n  POKEMON_ABILITIES,\n  POKEMON_MOVES,\n}\n\nexport interface PokemonDetailsNavigationProps {\n  id: string;\n}\n\nconst variants = {\n  enter: (direction: number) => {\n    return {\n      //x: direction > 0 ? 360 : -360,\n      opacity: 0,\n    };\n  },\n  center: {\n    //zIndex: 1,\n    //x: 0,\n    opacity: 1,\n  },\n  exit: (direction: number) => {\n    return {\n      //zIndex: 0,\n      //x: direction < 0 ? 360 : -360,\n      opacity: 0,\n    };\n  },\n};\n\nexport const PokemonDetailsNavigation: React.VFC<PokemonDetailsNavigationProps> = (\n  props\n) => {\n  const [[page, direction], setPage] = useState([0, 0]);\n\n  const handlePageChange = (next: number) => {\n    setPage([next, page > next ? 0 : 1]);\n  };\n\n  const currentPage = useMemo(() => {\n    switch (page) {\n      case 0:\n        return <PokemonBiography pokemonId={props.id} />;\n      case 1:\n        return <PokemonStats pokemonId={props.id} />;\n      case 2:\n        return <PokemonAbilities pokemonId={props.id} />;\n      case 3:\n        return <PokemonMoves pokemonId={props.id} />;\n    }\n  }, [page, props.id]);\n\n  return (\n    <div className=\"pokemon-details-navigation\">\n      <PokemonDetailsTabs\n        currentId={page}\n        onChange={handlePageChange}\n        pages={[\n          { label: \"biography\", id: Pages.POKEMON_BIOGRAPHY },\n          { label: \"Stats\", id: Pages.POKEMON_STATS },\n          { label: \"Abilities\", id: Pages.POKEMON_ABILITIES },\n          { label: \"Moves\", id: Pages.POKEMON_MOVES },\n        ]}\n      />\n      <AnimatePresence initial={false} custom={direction}>\n        <motion.div\n          key={page}\n          custom={direction}\n          variants={variants}\n          initial=\"enter\"\n          animate=\"center\"\n          exit=\"exit\"\n        >\n          {currentPage}\n        </motion.div>\n      </AnimatePresence>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { motion } from \"framer-motion\";\nimport Portal from \"../Portal\";\nimport { PokemonDetailsHeader } from \"./components/pokemon-details-header\";\nimport { PokemonDetailsOverlay } from \"./components/pokemon-details-overlay\";\nimport { PokemonDetailsNavigation } from \"./components/pokemon-details-navigation\";\n\nimport \"./styles.scss\";\n\nexport interface PokemonDetailsProps {\n  id: string;\n}\n\nexport const PokemonDetails: React.VFC<PokemonDetailsProps> = (props) => {\n  return (\n    <>\n      <PokemonDetailsOverlay />\n      <Portal>\n        <div className=\"pokemon-details\">\n          <motion.div\n            className=\"pokemon-details-content\"\n            layoutId={`pokemon-card-content-${props.id}`}\n          >\n            <PokemonDetailsHeader id={props.id} />\n            <PokemonDetailsNavigation id={props.id} />\n          </motion.div>\n        </div>\n      </Portal>\n    </>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { AnimatePresence } from \"framer-motion\";\nimport { PokemonsList } from \"components/pokemons-list\";\nimport { PokemonDetails } from \"../components/pokemon-details\";\n\ntype TParams = { id: string };\n\ninterface DetailsScreenProps extends RouteComponentProps<TParams> {}\n\nconst DetailsScreen: React.VFC<DetailsScreenProps> = ({ match }) => {\n  const { id } = match.params;\n\n  useEffect(() => {\n    if (id) {\n      document.body.classList.add(\"overflow-hidden\");\n    } else {\n      document.body.classList.remove(\"overflow-hidden\");\n    }\n  }, [id]);\n\n  return (\n    <>\n      <AnimatePresence initial={false}>\n        <PokemonsList />\n        {id && <PokemonDetails id={id} key=\"item\" />}\n      </AnimatePresence>\n    </>\n  );\n};\n\nexport default DetailsScreen;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { AnimateSharedLayout } from \"framer-motion\";\nimport { Header } from \"../components/header\";\n\nimport DetailsScreen from \"../routes/details\";\n\nexport function Navigation() {\n  return (\n    <div className=\"screen\">\n      <AnimateSharedLayout type=\"crossfade\">\n        <Header />\n        <Router>\n          <Route path={[\"/:id\", \"/\"]} component={DetailsScreen} />\n        </Router>\n      </AnimateSharedLayout>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { Navigation } from \"./navigation\";\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 60 * 30, // 1 month\n    },\n  },\n});\n\nconst App: React.VFC = () => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Navigation />\n      <ReactQueryDevtools />\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./app\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}